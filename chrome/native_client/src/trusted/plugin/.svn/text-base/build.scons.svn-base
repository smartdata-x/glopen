# -*- python -*-
# Copyright 2008, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Import('env')

# TODO(sehr): there is an  unreferenced file ldt_unittest.cc in this directory

# NOTE(robertm): currently needed for env.ComponentObject magic below
env.Prepend(
    CPPPATH=['${SOURCE_ROOT}/native_client/src/third_party/npapi/files/include']
)

# NOTE(robertm): needed for a bunch of includes from X11/Intrinsic.h
env.Prepend(
    CPPPATH=['${SOURCE_ROOT}/third_party/libxt/include']
)

libs = [
    'nonnacl_util',
    'nonnacl_srpc',
    'gio_shm',
    'nrd_xfer',
    'google_nacl_npruntime',
    'google_nacl_imc_c',
    'platform',
    'platform_qual_lib',
    'gio',
    'expiration',
    'sel',
]
if env['SHARED_LIBS_SPECIAL']:
  env.Append(LIBS=[l + '_shared' for l in libs])
else:
  env.Append(LIBS=libs)

if not env.Bit('mac'):
  env['COMPONENT_STATIC'] = False


if env.Bit('linux'):
    env.Append(
        CCFLAGS=['-fPIC', '-Wno-long-long',],
        CPPDEFINES = ['XP_UNIX', 'MOZ_X11'],
        LIBS = ['dl', 'Xt', 'X11', 'crypto'],
        )

    # We usually try to build things statically, but the plugin is a .so
    env.FilterOut(LINKFLAGS=['-static'])

if env.Bit('mac'):
    env.Append(
        CCFLAGS=['-Wno-long-long',
                 # warning: Basically all of our 2d Mac stuff is deprecated.
                 '-Wno-deprecated',
                 '-Wno-deprecated-declarations'],
        CPPDEFINES = [
            'XP_MACOSX',
            'XP_UNIX',
            ['TARGET_API_MAC_CARBON', '1'],
            # TODO(robertm): NO_X11 may be obsolete
            'NO_X11',
            'USE_SYSTEM_CONSOLE',
        ],
        FRAMEWORKS = ['Carbon'],
        # TODO(jrg): it's a little awkward to, when you want a bundle:
        #  1) add -bundle to your LINKFLAGS
        #  2) create a "program" (which shows up in all_programs target)
        #  3) create a bundle out of it, specifying the bundle extension
        # Ideally that all happens inside a CompleteBundlePseudoBuilder().
        LINKFLAGS = ['-bundle', '-framework', 'Foundation']
    )


if env.Bit('windows'):
    env.Append(
        CCFLAGS = ['/EHsc',],
        CPPDEFINES = ['XP_WIN', 'WIN32', '_WINDOWS'],
        LIBS = ['gdi32', 'user32', ],
    )
    env.Tool('atlmfc_vc80')

common_inputs = [
    # TODO: we should put a scons file in src/third_party_mod/nacl_plugin
    #       which exports a library which is then linked in.
    #       Currently this results inlink time symbol clashes
    # generic URL-origin / same-domain handling
    'origin.cc',
    # Portable plugin code
    'srpc/browser_interface.cc',
    'srpc/closure.cc',
    'srpc/connected_socket.cc',
    'srpc/desc_based_handle.cc',
    'srpc/method_map.cc',
    'srpc/nexe_arch.cc',
    'srpc/plugin.cc',
    'srpc/portable_handle.cc',
    'srpc/scriptable_handle.cc',
    'srpc/service_runtime.cc',
    'srpc/shared_memory.cc',
    'srpc/socket_address.cc',
    'srpc/srpc_client.cc',
    'srpc/srt_socket.cc',
    'srpc/stream_shm_buffer.cc',
    'srpc/utility.cc',
]

common_objs = env.ComponentObject(common_inputs)

# NPAPI plugin, used for non-Chrome browsers.
npapi_inputs = [
    # NPAPI specific code
    env.ComponentObject('np_entry',
                        '${MAIN_DIR}/src/third_party_mod/npapi_plugin/' +
                        'np_entry.cc'),
    env.ComponentObject('npn_gate',
                        '${MAIN_DIR}/src/third_party_mod/npapi_plugin/' +
                        'npn_gate.cc'),
    'npapi/browser_impl_npapi.cc',
    'npapi/multimedia_socket.cc',
    'npapi/npapi_native.cc',
    'npapi/npp_gate.cc',
    'npapi/npp_launcher.cc',
    'npapi/plugin_npapi.cc',
    'npapi/ret_array.cc',
    'npapi/scriptable_impl_npapi.cc',
    'npapi/video.cc',
]

if env.Bit('windows'):
  if not env.Bit('chrome'):
    npapi_inputs += [
        'win/nacl_plugin.def',
        env.RES('win/nacl_plugin.rc'),
    ]
elif env.Bit('mac'):
  npapi_inputs += [
      'osx/open_mac_file.cc',
  ]

npGoogleNaClPlugin = 'npGoogleNaClPlugin'

if not env.Bit('mac'):
  if env.Bit('chrome'):
    plugin = env.ComponentLibrary(npGoogleNaClPlugin,
                                  common_objs + npapi_inputs,
                                  COMPONENT_STATIC=True)
  else:
    plugin = env.ComponentLibrary(npGoogleNaClPlugin,
                                  common_objs + npapi_inputs,
                                  no_import_lib=True)

  # we need this to build the plugin, so register it here
  env.AddPluginPrerequisite([plugin[0]])
else:
  REZ = '/Developer/Tools/Rez'
  env.Command(target='npGoogleNaClPlugin.rsrc',
              source='osx/npGoogleNaClPlugin.r',
              action=[Action(REZ + ' -o ${TARGET} ${SOURCE} -useDF')])
  exe = env.ComponentProgram(npGoogleNaClPlugin,
                             common_objs + npapi_inputs,
                             no_import_lib=True)
  # Bundle pattern can be found in
  # site_scons/site_tools/target_platform_mac.py
  bundle_name = '${STAGING_DIR}/' + npGoogleNaClPlugin + '.bundle'
  env.Bundle(bundle_name,
             BUNDLE_EXE = exe[0],
             BUNDLE_PKGINFO_FILENAME = 0,
             BUNDLE_RESOURCES = 'npGoogleNaClPlugin.rsrc',
             BUNDLE_INFO_PLIST = 'osx/Info.plist')
  # we need this to build the plugin, so register it here
  env.AddPluginPrerequisite([bundle_name])

test_env = env.Clone()
test_env.FilterOut(LINKFLAGS=['-bundle'])

# Rather than link nacl_plugin_code statically, this unittest uses dlopen.
if test_env['TARGET_ARCHITECTURE'] == 'x86' and test_env.Bit('linux'):
  unittest = test_env.ComponentProgram('plugin_unittest',
                                       'npapi/plugin_unittest.cc',
                                       no_import_lib=True)
  node = test_env.CommandTest(
                     'plugin_unittest.out',
                     command=[unittest, plugin])
  test_env.AddNodeToTestSuite(node, ['small_tests'], 'run_plugin_unittest')
elif env['TARGET_ARCHITECTURE'] == 'x86' and test_env.Bit('mac'):
  unittest = test_env.ComponentProgram('plugin_unittest',
                                       'npapi/plugin_unittest.cc')
  node = test_env.CommandTest(
                     'plugin_unittest.out',
                     command=[unittest, exe])
  test_env.AddNodeToTestSuite(node, ['small_tests'], 'run_plugin_unittest')

# PPAPI integration, used when built into Chrome.
ppapi_inputs = [
    'ppapi/browser_interface_ppapi.cc',
    'ppapi/plugin_ppapi.cc',
    'ppapi/scriptable_handle_ppapi.cc',
]

ppNaClPlugin = 'ppNaClPlugin'

if env.Bit('linux') and not env.Bit('chrome'):
  ppapi_plugin = env.ComponentLibrary(ppNaClPlugin,
                                      common_objs + ppapi_inputs,
                                      no_import_lib=True)

  # we need this to build the plugin, so register it here
  env.AddPluginPrerequisite([ppapi_plugin[0]])
