# Copyright 2008, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Import('env')

env.ComponentProgram('hello_world.nexe', 'hello_world.c')
node = env.CommandSelLdrTestNacl(
    'hello_world_test.out',
    command=[env.File('hello_world.nexe')],
    stdout_golden=env.File('hello_world.stdout'),
    )
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_hello_world_test')


env.ComponentProgram('at_exit.nexe', 'at_exit.c')
node = env.CommandSelLdrTestNacl(
    'at_exit_test.out',
    command=[env.File('at_exit.nexe')],
    stdout_golden=env.File('at_exit.stdout'),
    )
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_at_exit_test')


env.ComponentProgram('exit.nexe', 'exit.c')
node = env.CommandSelLdrTestNacl(
    'exit_test.out',
    command=[env.File('exit.nexe')],
    exit_status='69',
    )
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_exit_test')


env.ComponentProgram('printf.nexe', 'printf.c')
node = env.CommandSelLdrTestNacl(
    'printf_test.out',
    command=[env.File('printf.nexe'), '1000', '1', '0',],
    stdout_golden=env.File('printf.stdout'),
    )
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_printf_test')

# TODO(espindola): fix this ASAP
# c.f.: http://code.google.com/p/nativeclient/issues/detail?id=626
if env['BUILD_ARCHITECTURE'] != 'arm':
  env.ComponentProgram('float.nexe', 'float.c')
  node = env.CommandSelLdrTestNacl(
    'float_test.out',
    command=[env.File('float.nexe'),
             '1.0', '3.0', '0.5', '100.0', '0.3'],
    stdout_golden=env.File('float.stdout'),
    )
  env.AddNodeToTestSuite(node, ['small_tests', 'sel_ldr_tests'], 'run_float_test')


# TODO(robertm): use a golden file
env.ComponentProgram('dump_env.nexe', 'dump_env.c')
node = env.CommandSelLdrTestNacl(
    'dump_env.out',
    command=[env.File('dump_env.nexe'),
             'arg1', 'arg2', 'arg3', 'arg4', 'arg5', 'argv6', 'argv7'],
    )
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_dump_env_test')


env.ComponentProgram('misc_math.nexe', 'misc_math.c')
node = env.CommandSelLdrTestNacl(
     'misc_math_test.out',
    command=[env.File('misc_math.nexe')],
    )
env.AddNodeToTestSuite(node, ['small_tests'], 'run_misc_math_test')


# NOTE: We will probably not fix this until pnacl
TEST_SET = ['small_tests']
if env['TARGET_ARCHITECTURE'] == 'x86' and  env['TARGET_SUBARCH'] == '32':
  TEST_SET = []
env.ComponentProgram('abi.nexe', 'abi.c')
node = env.CommandSelLdrTestNacl(
    'abi_test.out',
    command=[env.File('abi.nexe')],
    )
env.AddNodeToTestSuite(node, TEST_SET, 'run_abi_test')
