# Copyright 2009, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import SCons.Script

Import('env')

LINK_FLAGS_MULTILIB = ['-nostdlib']
if env['BUILD_ARCHITECTURE'] == 'x86':
  if env['BUILD_SUBARCH'] == '32':
    LINK_FLAGS_MULTILIB.append('-m32')
  elif env['BUILD_SUBARCH'] == '64':
    LINK_FLAGS_MULTILIB.append('-m64')
  else:
    print "ERROR: unknown BUILD_SUBARCH: ", env['BUILD_SUBARCH']
    assert 0

env.Replace(LIBS=[],
            EXTRA_LIBS=[],
            LINKFLAGS=LINK_FLAGS_MULTILIB)

env.Append(CFLAGS='-Wno-long-long')

# TODO(robertm): fix this. The regualar version of 'barebones_regs
#                triggers a well-known llvm bug
if env['BUILD_ARCHITECTURE'] == 'arm':
  env.Append(CPPDEFINES='SMALL_REGS_TEST')

# NOTE: the x86 linker wants _start() to be the very first function
FAKE_STARTUP = env.ComponentObject('fake_startup', 'fake_startup.c')

for basename in ['addr_modes',
                 'exit',
                 'fib',
                 'hello_world',
                 'long_long',
                 'regs',
                 'switch',
                 'vtable',
                 'vaarg',
                 ]:
  # TODO(robertm): fix this ASAP
  if env['BUILD_ARCHITECTURE'] == 'arm' and basename == 'vaarg': continue

  # TODO(kcc): the barebones tests confuse the current nacl-ified valgrind.
  if env.IsRunningUnderValgrind(): continue

  src = 'barebones_' + basename + '.c'
  nexe = 'barebones_' + basename + '.nexe'
  out = 'barebones_' + basename + '.out'
  test = 'run_barebones_' + basename + '_test'
  test = 'run_barebones_' + basename + '_test'
  env.ComponentProgram(nexe, [FAKE_STARTUP, src])

  # NOTE: we avoid using zero as the "good" exit status and just
  #       arbitrarily picked 55. All tests are coded to follow this model.
  node = env.CommandSelLdrTestNacl(
      out,
      command=[env.File(nexe)],
      exit_status='55',)
  env.AddNodeToTestSuite(node, ['small_tests',
                                'barebones_tests',
                                'sel_ldr_tests'], test)


# a test that the validador can handle an empty segment after the last
# real segment. The gold linker produces files this
if env['BUILD_ARCHITECTURE'] == 'arm' and not ARGUMENTS.get('bitcode'):
  nexe = '${SCONSTRUCT_DIR}/tests/prebuilt/arm/gold-barebones_hello_world.nexe'
  node = env.CommandSelLdrTestNacl(
      'gold-barebones_hello_world.out',
      command=[env.File(nexe)],
      exit_status='55',)
  env.AddNodeToTestSuite(node, ['small_tests', 'sel_ldr_tests'],
                         'run_old-barebones_hello_world_test')
